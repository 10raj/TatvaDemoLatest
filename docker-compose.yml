---
    version: '3'
    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:3.3.1
        container_name: zookeeper
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        networks:
          - lm_network  
    
      kafka:
        image: confluentinc/cp-kafka:3.3.1
        container_name: kafka
        ports:
          - "9092:9092"
        depends_on:
          - zookeeper
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          #KAFKA_LISTENERS: EXTERNAL_SAME_HOST://0.0.0.0:29092,INTERNAL://0.0.0.0:9092
          #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
          #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 #,PLAINTEXT_INTERNAL://kafka-instance:29092
          #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
          KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
          KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        expose:
            - '9092'
        networks:
          - lm_network   
       
      db:
        image: mysql:5.7
        restart: always
        container_name: db
        environment:
          MYSQL_DATABASE: 'db'
          MYSQL_USER: 'user'
          MYSQL_PASSWORD: 'password'
          MYSQL_ROOT_PASSWORD: 'password'
        ports:
          - '3307:3306'
        expose:
          - '3307'
        volumes:
          - my-db:/var/lib/mysql
        networks:
          - lm_network
    
    
      eureka-service:
        build: ./LM/eureka_service
        hostname: eureka-service
        container_name: eureka-service
        ports:
          - '8762:8761'
        networks:
          - lm_network
        expose:
          - '8762'
    
      user_management_service:
        build: ./LM/user_management_service
        container_name: user_management_service
        depends_on:
          - eureka-service
          - api_gateway_service
          - db
        environment:
          - spring.datasource.url=jdbc:mysql://db:3306/db?createDatabaseIfNotExist=true
          - spring.datasource.username=root
          - spring.datasource.password=password
          - eureka.client.serviceUrl.defaultZone=http://eureka-service:8761/eureka
    
        ports:
          - '9556:9555'
        networks:
          - lm_network
        expose:
            - '9556'

      book_publisher_service:
        build: ./LM/book_publisher_service
        container_name: book_publisher_service
        depends_on:
          - eureka-service
          - api_gateway_service
          - db
          - kafka

        environment:
          - spring.datasource.url=jdbc:mysql://db:3306/library_management?createDatabaseIfNotExist=true
          - spring.datasource.username=root
          - spring.datasource.password=password
          - eureka.client.serviceUrl.defaultZone=http://eureka-service:8761/eureka
          - spring.kafka.bootstrap-servers=kafka:9092
            
        ports:
          - '9550:9550'
        networks:
            - lm_network
        expose:
          - '9550'   

      notification_service:
        build: ./LM/notification_service
        container_name: notification_service
        depends_on:
          - eureka-service
          - api_gateway_service
          - db
          - kafka

        environment:
          - spring.datasource.url=jdbc:mysql://db:3306/library_management?createDatabaseIfNotExist=true
          - spring.datasource.username=root
          - spring.datasource.password=password
          - eureka.client.serviceUrl.defaultZone=http://eureka-service:8761/eureka
          - spring.kafka.bootstrap-servers=kafka:9092
            
        ports:
          - '9551:9551'
        networks:
            - lm_network
        expose:
          - '9551'       

      reader_service:
        build: ./LM/reader_service
        container_name: reader_service
        depends_on:
          - eureka-service
          - api_gateway_service
          - db
          - kafka

        environment:
          - spring.datasource.url=jdbc:mysql://db:3306/library_management?createDatabaseIfNotExist=true
          - spring.datasource.username=root
          - spring.datasource.password=password
          - eureka.client.serviceUrl.defaultZone=http://eureka-service:8761/eureka
          - spring.kafka.bootstrap-servers=kafka:9092
          - spring.cloud.discovery.enabled=true
            
        ports:
          - '9552:9552'
        networks:
            - lm_network
        expose:
          - '9552'
      staff_service:
        build: ./LM/staff_service
        container_name: staff_service
        depends_on:
          - eureka-service
          - api_gateway_service
          - db
          - kafka

        environment:
          - spring.datasource.url=jdbc:mysql://db:3306/library_management?createDatabaseIfNotExist=true
          - spring.datasource.username=root
          - spring.datasource.password=password
          - eureka.client.serviceUrl.defaultZone=http://eureka-service:8761/eureka
          - spring.kafka.bootstrap-servers=kafka:9092
            
        ports:
          - '9553:9553'
        networks:
            - lm_network
        expose:
          - '9553'           
              
          
      api_gateway_service:
        build: ./LM/api_gateway_service
        container_name: api_gateway_service
        depends_on:
          - eureka-service 
        environment:
          - eureka.client.serviceUrl.defaultZone=http://eureka-service:8761/eureka
        ports:
          - '9999:9999'
        networks:
          - lm_network
        expose:
          - '9999'
    
    
    
    volumes:
      my-db:
    
    networks:
      lm_network:
      kafka_nework:  


      #End